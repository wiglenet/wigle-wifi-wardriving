import groovy.sql.Sql

apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

android {
    namespace "net.wigle.wigleandroid"
    compileSdkVersion 33
    defaultConfig {
        applicationId "net.wigle.wigleandroid"
        minSdkVersion 24
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/ASL2.0', 'META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/LICENSE.txt', 'META-INF/MANIFEST.MF']
        }
    }

}

configurations {
    driver
}

dependencies {
    driver 'org.xerial:sqlite-jdbc:3.42.0.0'
}

// make a driver copy, per https://stackoverflow.com/questions/51676049/cannot-change-strategy-of-configuration-sqlite
// NOTE: this continues to result in warnings: Configuration 'driver' was resolved during configuration time.\n This is a build performance and scalability issue.
URLClassLoader loader = GroovyObject.class.classLoader
def driverCopy = configurations.driver.copy()
driverCopy.each {File file -> loader.addURL(file.toURI().toURL())}

ext {
    inputMxcSqlDir = layout.projectDirectory.dir("etc/mccmncsqlite")
    outputMxcDbFile = layout.projectDirectory.file("src/main/assets/mmcmnc.sqlite")
    mxcDictionaryFile = inputMxcSqlDir.file("mcc-mnc-dict.json")
    outputBtMemberUuidFile = layout.projectDirectory.file("src/main/assets/btmember.yaml")
    outputBtCoIdFile = layout.projectDirectory.file("src/main/assets/btco.yaml")
}

dependencies {
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.legacy:legacy-support-core-utils:1.0.0"
    implementation "androidx.core:core:1.6.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "com.google.android.material:material:1.6.0"
    implementation "com.google.android.gms:play-services-maps:18.1.0"
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.slf4j:slf4j-android:1.7.19'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation (name:'MaskedEditText-1.0.5', ext:'aar')
    implementation 'com.goebl:simplify:1.0.0'
    implementation "com.appmattus.certificatetransparency:certificatetransparency-android:2.5.19"
    implementation 'com.google.maps.android:android-maps-utils:3.1.1'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.1'
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

import groovy.json.JsonSlurper
import java.sql.SQLException

//TODO: this runs every time, which isn't optimal. just needs to run before build
tasks.register('downloadFile') {
    println "===MCC/MNC DB Creation==="
    download.run {
        src 'https://api.wigle.net/api/v2/cell/mccMnc'
        dest mxcDictionaryFile
        overwrite true
    }
    File test = new File(mxcDictionaryFile.toString())
    if (test.exists()) {
        println "Wrote $mxcDictionaryFile"
    } else {
        throw new IOException("Failed to download mcc-mnc file: $mxcDictionaryFile")
    }

}

tasks.register('createMccMncDB') {
    dependsOn 'downloadFile'
    ext.loadScript = { sql, file ->
        println("Applying " + file)
        String[] sqlcmds = file.text.split(";")
        sqlcmds.collect { it.trim() }.findAll { !it.isEmpty() && !it.startsWith("--") }.each {
            try {
                sql.execute(it)
            } catch (SQLException e) {
                System.err << "Invalid SQL statement: " + it
                e.printStackTrace(System.err)
                throw new GradleException('Preformulated MCC/MNC Database SQL Failure.')
            }
        }
    }

    delete outputMxcDbFile
    def sql = Sql.newInstance("jdbc:sqlite:$outputMxcDbFile", '', '', 'org.sqlite.JDBC')
    new File("$inputMxcSqlDir/").eachFileMatch(~/.*\.sql/) { loadScript(sql, it) }
    def inputFile = new File(mxcDictionaryFile.toString())
    def mccMap = new JsonSlurper().parseText(inputFile.text)
    def insertSql = 'INSERT OR REPLACE INTO wigle_mcc_mnc (mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes) VALUES (?,?,?,?,?,?,?,?,?,?)'
    def myKeyNames = ['mcc', 'mnc']
    mccMap.each { mcc, mncMap ->
        mncMap.each { mnc, value ->
            def type = value?.type
            def countryName = value?.countryName
            def countryCode = value?.countryCode
            def brand = value?.brand
            def operator = value?.operator
            def status = value?.status
            def bands = value?.bands
            def notes = value?.notes
            def params = [mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes]
            sql.executeInsert insertSql, params, myKeyNames
        }
    }
    println "MCC/MNC Database created: $outputMxcDbFile"
    sql.close()
}

//TODO: this runs every time, which isn't optimal. just needs to run before build
tasks.register('downloadBtMemberFile') {
    println "===BT Member UUID YAML Data==="
    download.run {
        src 'https://api.bitbucket.org/2.0/repositories/bluetooth-SIG/public/src/main/assigned_numbers/uuids/member_uuids.yaml'
        dest outputBtMemberUuidFile.toString()
        overwrite true
    }
    File testUuid = new File(outputBtMemberUuidFile.toString())
    if (testUuid.exists()) {
        println "Wrote $outputBtMemberUuidFile"
    } else {
        throw new IOException("Failed to download BT UUID file: $outputBtMemberUuidFile")
    }
    println "===BT Company ID YAML Data==="
    download.run {
        src 'https://api.bitbucket.org/2.0/repositories/bluetooth-SIG/public/src/main/assigned_numbers/company_identifiers/company_identifiers.yaml'
        dest outputBtCoIdFile
        overwrite true
    }
    File testMfgrId = new File(outputBtCoIdFile.toString())
    if (testMfgrId.exists()) {
        println "Wrote $outputBtCoIdFile"
    } else {
        throw new IOException("Failed to download BT co. ID file: $outputBtCoIdFile")
    }
}

build.dependsOn downloadFile, createMccMncDB, downloadBtMemberFile
