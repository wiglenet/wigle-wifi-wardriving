import groovy.sql.Sql

apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'
apply plugin: 'groovyx.android'

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "net.wigle.wigleandroid"
        minSdkVersion 14
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
    }
}

configurations {
    driver
}

dependencies {
    driver 'org.xerial:sqlite-jdbc:3.23.1'
}

// make a driver copy, per https://stackoverflow.com/questions/51676049/cannot-change-strategy-of-configuration-sqlite
URLClassLoader loader = GroovyObject.class.classLoader
def driverCopy = configurations.driver.copy()
driverCopy.each {File file -> loader.addURL(file.toURI().toURL())}

ext {
    inputMxcSqlDir = "etc/mccmncsqlite"
    outputMxcDbFile = "$projectDir/src/main/assets/mmcmnc.sqlite"
    mxcDictionaryFile = "$inputMxcSqlDir/mcc-mnc-dict.json"
}

dependencies {
    implementation project(':android-maps-utils')
    implementation "androidx.core:core:1.0.2"
    implementation "androidx.legacy:legacy-support-core-utils:1.0.0"
    implementation "com.google.android.material:material:1.0.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.appcompat:appcompat:1.0.2"
    // note: may be cause of libhwui crash - see https://github.com/koral--/android-gif-drawable/releases/tag/v1.2.16
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.15' // Stranded (.16-> minSDK == 17)
    implementation "com.google.android.gms:play-services-maps:16.1.0"
    implementation 'com.google.android.gms:play-services-vision:17.0.2'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'org.slf4j:slf4j-android:1.7.19'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.0.pr3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.0.pr3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr3'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'ru.egslava:MaskedEditText:1.0.5'
    implementation 'uk.co.alt236:bluetooth-le-library-android:1.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

import groovy.json.JsonSlurper

//TODO: this runs every time, which isn't optimal. just needs to run before build
task downloadFile (type: Download) {
    println "downloading mcc/mnc data"
    download {
        src 'https://api.wigle.net/api/v2/cell/mccMnc'
        dest "../$mxcDictionaryFile"
        overwrite true
        acceptAnyCertificate true /* horrible, but alternative is update trust store <=> letsencrypt */
    }
}

task createMccMncDB (dependsOn: 'downloadFile') {
    ext.loadScript = { sql, file ->
        println("Applying " + file)
        String[] sqlcmds = file.text.split(";")
        sqlcmds.collect{it.trim()}.findAll{!it.isEmpty() && !it.startsWith("--")}.each{
            try {
                sql.execute(it)
            } catch(java.sql.SQLException e) {
                System.err << "Invalid SQL statement: " + it
                e.printStackTrace(System.err)
                throw new GradleException('Preformulated MCC/MNC Database SQL Failure.')
            }
        }
    }

    delete outputMxcDbFile
    def sql = groovy.sql.Sql.newInstance("jdbc:sqlite:$outputMxcDbFile",'','','org.sqlite.JDBC')
    new File("$inputMxcSqlDir/").eachFileMatch(~/.*\.sql/) {loadScript(sql, it)}
    def inputFile = new File("$mxcDictionaryFile")
    def mccMap = new JsonSlurper().parseText(inputFile.text)
    def insertSql = 'INSERT OR REPLACE INTO wigle_mcc_mnc (mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes) VALUES (?,?,?,?,?,?,?,?,?,?)'
    def myKeyNames = ['mcc', 'mnc']
    mccMap.each { mcc, mncMap ->
        //DEBUG: println "mcc: $mcc"
        mncMap.each {mnc, value ->
            //DEBUG: println "\tmnc: $mnc"
            //DEBUG: println "\t\tvalue: $value"
            def type = value?.type
            def countryName = value?.countryName
            def countryCode = value?.countryCode
            def brand = value?.brand
            def operator = value?.operator
            def status = value?.status
            def bands = value?.bands
            def notes = value?.notes
            def params = [mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes]
            sql.executeInsert insertSql, params, myKeyNames
        }
    }
    sql.close()
}
